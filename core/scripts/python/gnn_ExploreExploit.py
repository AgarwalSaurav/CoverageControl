import sys
import math
import time
import numpy as np
from sklearn.metrics import pairwise_distances as pwdist
from scipy.optimize import linear_sum_assignment
import pyCoverageControl # Main library
from pyCoverageControl import Point2 # for defining points
from pyCoverageControl import PointVector # for defining list of points
from pyCoverageControl import CoverageSystem
from pyCoverageControl import OracleBangExploreExploit
from multiprocessing import Pool

params_ = pyCoverageControl.Parameters('parameters.yaml')

num_gaussians = 10
num_robots = 20

count = 0
robot_id = 0

cnn_voronoi_count = 0
cnn_explore_count = 0

# Need to modify this function
def write_npz():
    local_maps = []
    communication_maps = []
    exploration_maps = []
    for i in range(0, num_robots):
        local_maps.append(env.GetRobotLocalMap(i))
        communication_maps.append(env.GetCommunicationMap(i))
        exploration_maps.append(env.GetRobotExplorationMap(i))
    voronoi_features = env.GetLocalVoronoiFeatures()
    goals = env.GetGoals()
    robot_positions=env.GetRobotPositions()

    np.savez_compressed('train_gnn/data_' + f'{(count):07d}' + '.npz',
            robot_positions=robot_positions,
            local_maps = local_maps,
            communication_maps = communication_maps,
            features=voronoi_features,
            labels=oracle.GetActions(),
            objective_value=env.GetObjectiveValue()
            )
    count = count + 1

    for i in range(0, num_robots):
        np.savez_compressed('train_cnn_voronoi/data_' + f'{(cnn_voronoi_count):07d}' + '.npz',
                communication_map = communication_maps[i],
                local_map = local_maps[i],
                label = voronoi_features[i]
                )
        cnn_voronoi_count = cnn_voronoi_count + 1

    robot_status = oracle.GetRobotStatus()
    for i in range(0, num_robots):
        if robot_status == 0:
            np.savez_compressed('train_cnn_explore/data_' + f'{(cnn_explore_count):07d}' + '.npz',
                    exploration_map = exploration_maps[i],
                    label = goals[i] - robot_positions[i]
                    )
            cnn_explore_count = cnn_explore_count + 1

dataset_count = 200000
while count < dataset_count:
    print("New environment")
    num_steps = 0
    env = CoverageSystem(params_, num_gaussians, num_robots)
    oracle = OracleBangExploreExploit(params_, num_robots, env)

    cont_flag = True
    while num_steps < params_.pEpisodeSteps:
        for i in range(0, 5):
            cont_flag = oracle.Step();
            if cont_flag == False:
                break;
        if cont_flag == False:
            break;

        write_npz()

        num_steps = num_steps + 1
        print(str(count), str(num_steps))
    for i in range(0, 10):
        cont_flag = oracle.Step();

/**
 *
 **/

#ifndef COVERAGECONTROL_SIMUL_EXPLORE_EXPLOIT_H_
#define COVERAGECONTROL_SIMUL_EXPLORE_EXPLOIT_H_

#include <vector>
#include <fstream>
#include <iostream>
#include <random>
#include <algorithm>
#include <set>
#include <queue>
#include <omp.h>

#include "../parameters.h"
#include "../typedefs.h"
#include "../coverage_system.h"
#include "../lloyd_algorithms.h"
#include "../map_utils.h"
#include <lsap/Hungarian.h>

namespace CoverageControl {

	class OracleSimulExploreExploit {
		private:
			Parameters const params_;
			size_t num_robots_ = 0;
			CoverageSystem &env_;
			Voronoi voronoi_;
			std::vector <VoronoiCell> voronoi_cells_;
			PointVector robot_global_positions_;
			PointVector goals_, actions_;
			MapType const &exploration_map_; // Binary map: true for unexplored locations
			MapType const &explored_idf_map_;

			int recompute_goal_steps_ = 0, recompute_goal_counter_ = 0;
			bool continue_flag_ = false;
			bool trigger_exploit_ = false;
			bool first_step_ = true;
			std::vector <int> robot_status_; // 0: exploring, 1: exploit
			std::vector <int> random_goal_counter_;
			std::random_device rd_;  //Will be used to obtain a seed for the random number engine
			std::mt19937 gen_;
			std::uniform_real_distribution<> rand_dist_;
			double exploration_threshold_ = 0.8;
			double exploit_threshold_ = 0;
			double too_close_factor_ = 6.0;
			double sensor_area_ = 0;
			double local_win_ = 0;
			double time_step_dist_ = 0;
			double eps = 0.0001;
			double better_threshold_ = 2;

		public:
			OracleSimulExploreExploit(
					Parameters const &params,
					size_t const &num_robots,
					CoverageSystem &env) :
				params_{params},
				num_robots_{num_robots},
				env_{env}, exploration_map_{env.GetSystemExplorationMap()}, explored_idf_map_{env.GetSystemExploredIDFMap()} {

					voronoi_cells_.resize(num_robots_);

					robot_global_positions_ = env_.GetRobotPositions();
					actions_.resize(num_robots_);
					goals_ = robot_global_positions_;
					sensor_area_ = params_.pSensorSize * params_.pSensorSize;
					local_win_ = params_.pLocalMapSize/2;
					exploit_threshold_ = 0.2 * local_win_ * local_win_;

					robot_status_.resize(num_robots_, 0);
					random_goal_counter_.resize(num_robots_, 10);

					std::srand(0);
					gen_ = std::mt19937(rd_()); //Standard mersenne_twister_engine seeded with rd_()

					time_step_dist_ = params_.pMaxRobotSpeed * params_.pTimeStep * params_.pResolution;
					rand_dist_ = std::uniform_real_distribution<>(-time_step_dist_, time_step_dist_);
					ComputeGoals();
				}

			PointVector GetActions() { return actions_; }

			std::vector<int> GetRobotStatus() { return robot_status_; }


			void SetGoals(PointVector const &goals) {
				goals_ = goals;
			}

			auto GetGoals() { return goals_; }
			std::vector<VoronoiCell> GetVoronoiCells() { return voronoi_cells_; }

			void ManageRobotStatus() {
				robot_global_positions_ = env_.GetRobotPositions();
				for(size_t iRobot = 0; iRobot < num_robots_; ++iRobot) {
					robot_status_[iRobot] = 0;

					MapUtils::MapBounds index, offset;
					MapUtils::ComputeOffsets(params_.pResolution, robot_global_positions_[iRobot], local_win_, params_.pWorldMapSize, index, offset);
					double unexplored = exploration_map_.block(index.left + offset.left, index.bottom + offset.bottom, offset.width, offset.height).count();
					double idf_value = explored_idf_map_.block(index.left + offset.left, index.bottom + offset.bottom, offset.width, offset.height).sum();

					if(unexplored < exploit_threshold_ and idf_value > exploit_threshold_) {
						robot_status_[iRobot] = 1;
						for(size_t jRobot = 0; jRobot < iRobot; ++jRobot) {
							double goal_dist = (goals_[iRobot] - goals_[jRobot]).norm();
							if(goal_dist < too_close_factor_ * params_.pSensorSize * params_.pResolution and env_.GetExplorationRatio() < exploration_threshold_ ) {
								robot_status_[jRobot] = 0;
							}
						}
					}
				}
			}

			double GetFrontierGoal(Point2 const &pos, Point2 &best_goal) {
				best_goal = pos;
				double best_bcr = 0, best_benefit = 0;
				double pos_x_lim = std::min(pos[0] + time_step_dist_, double(params_.pWorldMapSize));
				double pos_y_lim = std::min(pos[1] + time_step_dist_, double(params_.pWorldMapSize));
				for(double pos_x = std::max(pos[0] - time_step_dist_, eps); pos_x < pos_x_lim;  pos_x += 1 * params_.pResolution ) {
					for(double pos_y = std::max(pos[1] - time_step_dist_, eps); pos_y < pos_y_lim; pos_y += 1 * params_.pResolution ) {
						Point2 qpos{ pos_x, pos_y };
						double dist = (qpos - pos).norm();
						/* if(dist < 2 * params_.pResolution) { continue; } */
						dist = std::max(dist, time_step_dist_);
						MapUtils::MapBounds index, offset;
						MapUtils::ComputeOffsets(params_.pResolution, qpos, params_.pSensorSize, params_.pWorldMapSize, index, offset);
						double unexplored = exploration_map_.block(index.left + offset.left, index.bottom + offset.bottom, offset.width, offset.height).count();
						double benefit = unexplored;
						if(unexplored > 0.1 * sensor_area_) {
							double idf_value = explored_idf_map_.block(index.left + offset.left, index.bottom + offset.bottom, offset.width, offset.height).count();
							benefit += 2 * idf_value;
						}

						double bcr = benefit/dist;
						double bcr_diff = bcr - best_bcr;
						bool update = false;
						if(bcr_diff < -kEps) { continue; }
						if(std::abs(bcr_diff) < kEps) {
							Point2 unit_best_goal = best_goal.normalized();
							Point2 unit_qpos = qpos.normalized();
							Point2 unit_curr_pos = pos.normalized();
							if(unit_best_goal.dot(unit_curr_pos) > unit_qpos.dot(unit_curr_pos)) {
								update = true;
							}
						}

						if(bcr_diff > kEps or update == true) {
							best_bcr = bcr;
							best_goal = qpos;
							best_benefit = benefit;
						}
					}
				}
				/* std::cout << "Best goal: " << best_bcr << " " << best_goal[0] << " " << best_goal[1] << std::endl; */
				return best_benefit;
			}

			void ComputeGoals() {

				/* Exploration Robots */
				ManageRobotStatus();

#pragma omp parallel for num_threads(num_robots_)
				for(size_t iRobot = 0; iRobot < num_robots_; ++iRobot) {
					if(robot_status_[iRobot] == 0) {
						double best_benefit = GetFrontierGoal(robot_global_positions_[iRobot], goals_[iRobot]);
						if(best_benefit < better_threshold_) {
							robot_status_[iRobot] = 1;
						}
						/* std::cout << iRobot << " " << robot_status_[iRobot] << " " << (goals_[iRobot] - robot_global_positions_[iRobot]).norm() << " " << goals_[iRobot][0] << " " << goals_[iRobot][1] << std::endl; */
					}
				}

				/* Exploiting Robots */
				std::vector <int> exploit_robots;
				for(size_t iRobot = 0; iRobot < num_robots_; ++iRobot) {
					if(robot_status_[iRobot] != 0) {
						exploit_robots.push_back(iRobot);
					}
				}
#pragma omp parallel for num_threads(num_robots_)
				for(size_t iRobot = 0; iRobot < num_robots_; ++iRobot) {
					if(robot_status_[iRobot] != 0) { // 1 is for exploit
						MapType robot_local_map = MapType::Zero(params_.pLocalMapSize, params_.pLocalMapSize);
						MapUtils::GetSubMap(params_.pResolution, robot_global_positions_[iRobot], params_.pLocalMapSize, params_.pWorldMapSize, explored_idf_map_, robot_local_map);
						auto robot_neighbors_pos = env_.GetRobotsInCommunication(iRobot);
						PointVector robot_positions(robot_neighbors_pos.size() + 1);
						Point2 map_translation(params_.pLocalMapSize * params_.pResolution/2., params_.pLocalMapSize * params_.pResolution/2.);
						robot_positions[0] = map_translation;
						int count = 1;
						for(auto const &pos:robot_neighbors_pos) {
							robot_positions[count] = pos + map_translation;
							++count;
						}
						Voronoi voronoi(robot_positions, robot_local_map, params_.pLocalMapSize, params_.pResolution, true, 0);
						auto vcell = voronoi.GetVoronoiCell();
						vcell.centroid -= map_translation;
						goals_[iRobot] = robot_global_positions_[iRobot] + vcell.centroid;
					}
				}

				int num_exploring_robots = num_robots_ - exploit_robots.size();
				std::cout << "Number of exploring_robots: " << num_exploring_robots << std::endl;
				std::cout << "Exploration ratio: " << env_.GetExplorationRatio() * 100 << std::endl;

			}

			bool Step() {
				robot_global_positions_ = env_.GetRobotPositions();
				goals_ = robot_global_positions_;
				if(first_step_ == true) {
					first_step_ = false;
					for(size_t iRobot = 0; iRobot < num_robots_; ++iRobot) {
						goals_[iRobot] = robot_global_positions_[iRobot] + Point2{ rand_dist_(gen_), rand_dist_(gen_) };
					}

				} else {
					ComputeGoals();
				}
				continue_flag_ = false;
				for(size_t iRobot = 0; iRobot < num_robots_; ++iRobot) {
					actions_[iRobot] = Point2(0, 0);
					Point2 diff = goals_[iRobot] - robot_global_positions_[iRobot];
					double dist = diff.norm();
					if(dist < eps) {
						continue;
					}
					double speed = dist / params_.pTimeStep;
					speed = std::min(params_.pMaxRobotSpeed, speed);
					Point2 direction(diff);
					direction.normalize();
					actions_[iRobot] = speed * direction;
					/* printf("Step: %ld, %d, (%f, %f) \t (%f, %f)\n", iRobot, robot_status_[iRobot], goals_[iRobot][0], goals_[iRobot][1], actions_[iRobot][0], actions_[iRobot][1]); */
					if(dist > params_.pResolution/2.) {
						/* std::cout << actions_[iRobot].norm() << std::endl; */
						continue_flag_ = true;
					}
				}
				return continue_flag_;
			}

	};

} /* namespace CoverageControl */
#endif /* COVERAGECONTROL_SIMUL_EXPLORE_EXPLOIT_H_ */
